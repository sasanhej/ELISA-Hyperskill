type: edu
files:
- name: app.py
  visible: true
  text: |
    print('Hello World!')
  learner_created: false
- name: elisa_data.csv
  visible: true
  learner_created: false
- name: standard_values.csv
  visible: true
  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
- name: test/tests.py
  visible: false
  text: |+
    from hstest import *
    import pandas as pd
    import os

    standard_values = """Samples,OD1,OD2,Concentration (ng/ml)\nSTD1,0.319,0.315,2.058\nSTD2,0.618,0.463,6.173\nSTD3,0.675,0.69,18.519\nSTD4,0.847,0.851,55.556\nSTD5,1.025,1.008,166.667\nSTD6,0.97,0.975,500.0"""

    elisa_testing = """Sample,OD1,OD2\nSample1,0.493,0.391\nSample2,0.330,0.345\nSample3,0.337,0.387\nSample4,0.372,0.366\nSample5,0.208,0.394\nSample6,0.396,0.372\nSample7,0.378,0.359\nSample8,0.317,0.356\nSample9,0.456,0.502\nSample10,0.509,0.387\nBLANK,0.110,0.135"""

    elisa_data = """Sample,OD1,OD2\nSample1,0.443,0.488\nSample2,0.433,0.43\nSample3,0.343,0.351\nSample4,0.39,0.354\nSample5,0.451,0.435\nSample6,0.408,0.371\nSample7,0.372,0.36\nSample8,0.326,0.333\nSample9,0.453,0.423\nSample10,0.352,0.379\nBLANK,0.11,0.135"""


    class TestUserProgram(StageTest):
        @dynamic_test(files={"test/elisa_data.csv": elisa_data, "test/standard_values.csv": standard_values})
        def test(self):
            main = TestedProgram()
            main.start()
            if not main.is_waiting_input():
                return CheckResult.wrong("You should not input any data")
            main.execute("test/elisa_data.csv")
            main.execute("test/standard_values.csv")
            path = "elisa_result.csv"
            if not os.path.exists(path):
                return CheckResult.wrong("File 'elisa_result.csv' could not be found!")
            df = pd.read_csv("elisa_result.csv")
            if "AverageOD" and "CorrectedOD" not in df.columns:
                return CheckResult.wrong("Your DataFrame should have 'AverageOD' and 'CorrectedOD' columns!")
            elif "Concentration (ng/ml)" not in df.columns:
                return CheckResult.wrong("Your DataFrame should have a 'Concentration (ng/ml)' column!")
            else:
                return CheckResult.correct()

        @dynamic_test(files={"test/elisa_data.csv": elisa_data, "test/standard_values.csv": standard_values})
        def test2(self):
            main = TestedProgram()
            main.start()
            main.execute("test/elisa_data.csv")
            main.execute("test/standard_values.csv")
            df = pd.read_csv("elisa_result.csv")
            result = [2.3058768520643413, 1.8374941611593625, 0.9449687144630154, 1.1735894563808618, 1.9879148000976, 1.3503845848881777, 1.1162243505079803, 0.8005612509981104, 1.92155033858538, 1.1115166495269737]
            for i, j in zip(result, df['Concentration (ng/ml)'].to_list()):
                if abs(i-j) > 0.0001:
                    return CheckResult.wrong("'Concentration (ng/ml)' column has wrong values.")
                else:
                    return CheckResult.correct()

        @dynamic_test(files={"test/elisa_testing.csv": elisa_testing, "test/standard_values.csv": standard_values})
        def test3(self):
            main = TestedProgram()
            main.start()
            main.execute("test/elisa_testing.csv")
            main.execute("test/standard_values.csv")
            df = pd.read_csv("elisa_result.csv")
            result = [1.974521387025064, 0.8650391913771295, 1.0788722738978105, 1.14470465910005, 0.590962728317693, 1.2932643752343738, 1.1399299706999932, 0.8568394481306176, 2.5128210966753435, 2.0557993687964533]
            for i, j in zip(result, df['Concentration (ng/ml)'].to_list()):
                if abs(i-j) > 0.0001:
                    return CheckResult.wrong("'Concentration (ng/ml)' column has wrong values.")
                else:
                    return CheckResult.correct()


    if __name__ == '__main__':
        TestUserProgram().run_tests()



  learner_created: false
- name: tests.py
  visible: false
  text: |+
    from test.tests import TestUserProgram

    if __name__ == '__main__':
        TestUserProgram().run_tests()


  learner_created: false
- name: elisa_result.csv
  visible: true
  learner_created: true
- name: elisa_resultC.csv
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/22571#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Mon, 26 Jun 2023 00:05:43 UTC"
record: 4
